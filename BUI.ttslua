local Table = require("BeaverStash.Table")
local Log = require("BeaverStash.Log")
local XmlTools = require("BeaverStash.XmlTools")

---@shape bs__BUIElementRecord
---@field template table
---@field class bs__BUIElement

---@type table<string, bs__BUIElementRecord>
local BUITemplates = {}

---@type bs__BUIElement[]
local BUIElements = {}

---@class bs__BUI
---@field renderScheduled boolean
local BUI = {
    renderScheduled = false
}

local BUIElement = require("BeaverStash.BUI.Element")(BUI)
local BUIElementSeatManager = require("BeaverStash.BUI.ElementSeatManager")(BUI)

---@param elem bs__BUIElement
---@return table
function BUI.buildElement(elem)
    ---@type table[]
    local children = {}

    for k, v in pairs(elem.children) do
        table.insert(children, BUI.buildElement(v))
    end

    ---@type table<string, any>
    local attributes = {
        class = elem.template,
        id = elem.id
    }

    for k, v in pairs(elem.attributes) do
        attributes[k] = XmlTools.luaValueToXmlValue(v)
    end

    return {
        tag = BUITemplates[elem.template].template.tag,
        attributes = attributes,
        children = children
    }
end

function BUI.scheduleUIRender()
    if BUI.renderScheduled then return end
    BUI.renderScheduled = true
    local defaults = {}

    for k, v in pairs(BUITemplates) do
        table.insert(defaults, v.template)
    end

    ---@type table[]
    local bUI = {
        {
            tag = "Defaults",
            children = defaults
        }
    }

    Wait.frames(function()
        for k, v in ipairs(BUIElements) do
            if v:getParent() == nil then
                table.insert(bUI, BUI.buildElement(v))
            end
            v.rendered = true
        end
        UI.setXmlTable(--[[---@type tts__UIElement[] ]]bUI)
        BUI.renderScheduled = false
    end)
end

---@overload fun(templateName: "BUIPanel"         , id: string, parent: bs__BUIElement | any) : bs__BUIPanel
---@overload fun(templateName: "BUIPanel"         , id: string                              ) : bs__BUIPanel
---@overload fun(templateName: "BUIVerticalLayout", id: string, parent: bs__BUIElement | any) : bs__BUIVerticalLayout
---@overload fun(templateName: "BUIVerticalLayout", id: string                              ) : bs__BUIVerticalLayout
---@overload fun(templateName: "BUICloseButton"   , id: string, parent: bs__BUIElement | any) : bs__BUICloseButton
---@overload fun(templateName: "BUICloseButton"   , id: string                              ) : bs__BUICloseButton
---@overload fun(templateName: "BUIWindow"        , id: string, parent: bs__BUIElement | any) : bs__BUIWindow
---@overload fun(templateName: "BUIWindow"        , id: string                              ) : bs__BUIWindow
---@overload fun(templateName: "BUIButton"        , id: string, parent: bs__BUIElement | any) : bs__BUIButton
---@overload fun(templateName: "BUIButton"        , id: string                              ) : bs__BUIButton
---@overload fun(templateName: "BUIText"          , id: string, parent: bs__BUIElement | any) : bs__BUIText
---@overload fun(templateName: "BUIText"          , id: string                              ) : bs__BUIText
---@overload fun(templateName: "BUIInputField"    , id: string, parent: bs__BUIElement | any) : bs__BUIInputField
---@overload fun(templateName: "BUIInputField"    , id: string                              ) : bs__BUIInputField
---@overload fun(templateName: "BUIToggle"        , id: string, parent: bs__BUIElement | any) : bs__BUIToggle
---@overload fun(templateName: "BUIToggle"        , id: string                              ) : bs__BUIToggle
---@overload fun(templateName: string, id: string) : bs__BUIElement
---@param templateName string
---@param id string
---@param parent bs__BUIElement
---@return bs__BUIElement
function BUI.createElement(templateName, id, parent)
    local element = --[[---@type bs__BUIElement]]{
        rendered = false,
        attributes = {},
        children = {},
        id = id
    }

    local template = BUITemplates[templateName]

    Log.assert(not template, "[BUI] The template \"".. templateName.. "\" doesn't exist.")

    setmetatable(element, template.class)
    element.template = templateName
    for k, v in pairs(--[[---@type table]]element) do
        element:setupEvent(k)
    end


    for k, v in pairs(--[[---@type table<string, any>]]getmetatable(element)) do
        if k:match("_?_?(on.*)") then
            element[k] = v
        end
    end

    if element.___onInit then
        element:___onInit()
    end

    if parent then
        element:setParent(parent)
    end

    table.insert(BUIElements, element)
    BUI.scheduleUIRender()

    return element
end

---@overload fun(templateName: "BUIPanel"         , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIPanel>
---@overload fun(templateName: "BUIPanel"         , id: string                              ) : bs__BUIElementSeatManager<bs__BUIPanel>
---@overload fun(templateName: "BUIVerticalLayout", id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIVerticalLayout>
---@overload fun(templateName: "BUIVerticalLayout", id: string                              ) : bs__BUIElementSeatManager<bs__BUIVerticalLayout>
---@overload fun(templateName: "BUICloseButton"   , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUICloseButton>
---@overload fun(templateName: "BUICloseButton"   , id: string                              ) : bs__BUIElementSeatManager<bs__BUICloseButton>
---@overload fun(templateName: "BUIWindow"        , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIWindow>
---@overload fun(templateName: "BUIWindow"        , id: string                              ) : bs__BUIElementSeatManager<bs__BUIWindow>
---@overload fun(templateName: "BUIButton"        , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIButton>
---@overload fun(templateName: "BUIButton"        , id: string                              ) : bs__BUIElementSeatManager<bs__BUIButton>
---@overload fun(templateName: "BUIText"          , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIText>
---@overload fun(templateName: "BUIText"          , id: string                              ) : bs__BUIElementSeatManager<bs__BUIText>
---@overload fun(templateName: "BUIInputField"    , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIInputField>
---@overload fun(templateName: "BUIInputField"    , id: string                              ) : bs__BUIElementSeatManager<bs__BUIInputField>
---@overload fun(templateName: "BUIToggle"        , id: string, parent: bs__BUIElement | any) : bs__BUIElementSeatManager<bs__BUIToggle>
---@overload fun(templateName: "BUIToggle"        , id: string                              ) : bs__BUIElementSeatManager<bs__BUIToggle>
---@overload fun(templateName: string, id: string) : bs__BUIElementSeatManager<bs__BUIElement>
---@param templateName string
---@param id string
---@param parent bs__BUIElement
---@return bs__BUIElementSeatManager<bs__BUIElement>
function BUI.createElementSeatManager(templateName, id, parent)
    local elementSeatManager    = --[[---@type bs__BUIElementSeatManager<bs__BUIElement>]]BUIElementSeatManager({
        id = id,
        template = templateName
    })

    elementSeatManager.template = templateName

    if parent then
        elementSeatManager:setParent(parent)
    end

    return elementSeatManager
end

---@overload fun(name: string) : void
---@overload fun(name: string, template: table) : void
---@overload fun(name: string, template: table, class: bs__BUIElement) : void
---@param name string
---@param template table
---@param class bs__BUIElement
---@param parent string
---@return boolean
function BUI.registerTemplate(name, template, class, parent)
    Log.assert(name == nil, "[BUI] The template name was not supplied when registering.")
    Log.assert(BUITemplates[name] ~= nil, "[BUI] The template \"".. name.. "\" already exists.")

    local parentClass

    if parent ~= nil and parent ~= "" then
        if BUITemplates[parent] then
            parentClass = BUITemplates[parent].class
        else
            error("[BUI] The template \"".. parent.. "\" cannot be inherited since it doesn't exist.")
        end
    else
        parentClass = BUIElement
    end

    if class == nil then
        class = parentClass
    else
        for k, v in pairs(--[[---@type table<string, any>]]parentClass) do
            if k:match("_?_?(on.*)") and not rawget(class, k) then
                class[k] = v
            end
        end
        setmetatable(class, parentClass)
    end
    class.__index = class
    class.__newindex = BUIElement.__newindex
    template.attributes.class = name

    ---@type bs__BUIElementRecord
    local elementRecord = {
        template = template,
        class = class
    }

    BUITemplates[name] = elementRecord
    return true
end


return BUI
